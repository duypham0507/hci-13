{"ast":null,"code":"import { ɵɵdefineInjectable, Injectable, EventEmitter, Directive, ElementRef, Renderer2, Input, Output, HostListener, Component, ViewEncapsulation, ContentChild, TemplateRef, ViewChild, HostBinding, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as dragulaNamespace from '@swimlane/dragula'; // see https://github.com/dherges/ng-packagr/issues/217\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction ContainerComponent_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelement(1, \"ngx-dnd-item\", 3);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"model\", item_r3)(\"dropZone\", ctx_r2.dropZone)(\"dropZones\", ctx_r2.dropZones)(\"copy\", ctx_r2.copy)(\"moves\", ctx_r2.moves)(\"removeOnSpill\", ctx_r2.removeOnSpill)(\"droppableItemClass\", ctx_r2.droppableItemClass);\n  }\n}\n\nfunction ContainerComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, ContainerComponent_ng_container_1_ng_container_1_Template, 2, 7, \"ng-container\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r0.model);\n  }\n}\n\nfunction ContainerComponent_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngIf\", \"!model\"]);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"gu-empty\": a0\n  };\n};\n\nconst _c1 = [\"*\"];\n\nfunction ItemComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelement(1, \"ngx-dnd-container\", 3);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"model\", ctx_r0.model)(\"template\", ctx_r0.container.template)(\"dropZone\", ctx_r0.dropZone)(\"dropZones\", ctx_r0.dropZones)(\"removeOnSpill\", ctx_r0.removeOnSpill)(\"droppableItemClass\", ctx_r0.droppableItemClass)(\"copy\", ctx_r0.copy);\n  }\n}\n\nfunction ItemComponent_ng_container_2_1_ng_template_0_Template(rf, ctx) {}\n\nfunction ItemComponent_ng_container_2_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, ItemComponent_ng_container_2_1_ng_template_0_Template, 0, 0, \"ng-template\", 5);\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.container.template)(\"ngTemplateOutletContext\", ctx_r4.data);\n  }\n}\n\nfunction ItemComponent_ng_container_2_ng_container_2_ngx_dnd_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"ngx-dnd-container\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"model\", ctx_r7.model.children)(\"template\", ctx_r7.container.template)(\"dropZone\", ctx_r7.dropZone)(\"dropZones\", ctx_r7.dropZones)(\"removeOnSpill\", ctx_r7.removeOnSpill)(\"droppableItemClass\", ctx_r7.droppableItemClass)(\"copy\", ctx_r7.copy);\n  }\n}\n\nfunction ItemComponent_ng_container_2_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 6);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(3, ItemComponent_ng_container_2_ng_container_2_ngx_dnd_container_3_Template, 1, 7, \"ngx-dnd-container\", 7);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r5.model.label, \" \");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r5.model.children);\n  }\n}\n\nfunction ItemComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, ItemComponent_ng_container_2_1_Template, 1, 2, undefined, 4);\n    ɵngcc0.ɵɵtemplate(2, ItemComponent_ng_container_2_ng_container_2_Template, 4, 2, \"ng-container\", 4);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.container.template);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r1.container.template);\n  }\n}\n\nfunction ItemComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction ItemComponent_ng_container_4_1_ng_template_0_Template(rf, ctx) {}\n\nfunction ItemComponent_ng_container_4_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, ItemComponent_ng_container_4_1_ng_template_0_Template, 0, 0, \"ng-template\", 5);\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r8.container.template)(\"ngTemplateOutletContext\", ctx_r8.data);\n  }\n}\n\nfunction ItemComponent_ng_container_4_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r9.model, \" \");\n  }\n}\n\nfunction ItemComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, ItemComponent_ng_container_4_1_Template, 1, 2, undefined, 4);\n    ɵngcc0.ɵɵtemplate(2, ItemComponent_ng_container_4_div_2_Template, 2, 1, \"div\", 8);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r3.container.template);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r3.container.template);\n  }\n}\n\nconst dragula = dragulaNamespace;\n/**\n * Central service that handles all events\n *\n * @export\n */\n\nlet DrakeStoreService = /*#__PURE__*/(() => {\n  class DrakeStoreService {\n    constructor() {\n      this.droppableMap = new WeakMap();\n      this.draggableMap = new WeakMap();\n      this.dragulaOptions = this.createDrakeOptions();\n      this.drake = dragula([], this.dragulaOptions);\n      this.registerEvents();\n    }\n\n    register(droppable) {\n      this.droppableMap.set(droppable.container, droppable);\n      this.drake.containers.push(droppable.container);\n    }\n\n    remove(droppable) {\n      this.droppableMap.delete(droppable.container);\n      const idx = this.drake.containers.indexOf(droppable.container);\n\n      if (idx > -1) {\n        this.drake.containers.splice(idx, 1);\n      }\n    }\n\n    registerDraggable(draggable) {\n      this.draggableMap.set(draggable.element, draggable);\n    }\n\n    removeDraggable(draggable) {\n      this.draggableMap.delete(draggable.element);\n    }\n\n    createDrakeOptions() {\n      const accepts = (el, target\n      /*, source: any, sibling: any */\n      ) => {\n        if (el.contains(target)) {\n          return false;\n        }\n\n        const elementComponent = this.draggableMap.get(el);\n        const targetComponent = this.droppableMap.get(target);\n\n        if (elementComponent && targetComponent) {\n          return elementComponent.dropZones.includes(targetComponent.dropZone);\n        }\n\n        return true;\n      };\n\n      const copy = (_, source) => {\n        const sourceComponent = this.droppableMap.get(source);\n\n        if (sourceComponent) {\n          return sourceComponent.copy;\n        }\n\n        return false;\n      };\n\n      const moves = (el, source, handle, sibling) => {\n        const elementComponent = this.draggableMap.get(el);\n\n        if (elementComponent) {\n          return elementComponent.moves(source, handle, sibling);\n        }\n\n        return true;\n      };\n\n      const direction = (el, target, source) => {\n        const targetComponent = this.droppableMap.get(target);\n        return targetComponent.direction || 'vertical';\n      };\n\n      return {\n        accepts,\n        copy,\n        moves,\n        revertOnSpill: true,\n        direction\n      };\n    }\n\n    registerEvents() {\n      let dragElm;\n      let draggedItem;\n      this.drake.on('drag', (el, source) => {\n        draggedItem = undefined;\n        dragElm = el;\n\n        if (!el || !source) {\n          return;\n        }\n\n        if (this.draggableMap.has(el)) {\n          const elementComponent = this.draggableMap.get(el);\n          draggedItem = elementComponent.model;\n          elementComponent.drag.emit({\n            type: 'drag',\n            el,\n            source,\n            value: draggedItem\n          });\n        }\n\n        if (this.droppableMap.has(source)) {\n          const sourceComponent = this.droppableMap.get(source);\n          this.dragulaOptions.removeOnSpill = sourceComponent.removeOnSpill;\n          sourceComponent.drag.emit({\n            type: 'drag',\n            el,\n            source,\n            sourceComponent,\n            value: draggedItem\n          });\n        }\n      });\n      this.drake.on('drop', (el, target, source) => {\n        const targetComponent = this.droppableMap.get(target);\n\n        if (!targetComponent) {\n          // not a target, abort\n          return;\n        }\n\n        let dropElmModel = draggedItem;\n        const dropIndex = Array.prototype.indexOf.call(target.children, el);\n\n        if (dropIndex < 0) {\n          // dropIndex is bad... cancel\n          this.drake.cancel(true);\n          return;\n        }\n\n        const sourceComponent = this.droppableMap.get(source);\n\n        if (sourceComponent) {\n          const sourceModel = sourceComponent.model;\n          const targetModel = targetComponent.model;\n          const hasDragModel = !!(sourceModel && draggedItem);\n          const dragIndex = hasDragModel ? sourceModel.indexOf(draggedItem) : -1;\n\n          if (hasDragModel && dragIndex < 0) {\n            // dragIndex is bad... cancel\n            this.drake.cancel(true);\n            return;\n          }\n\n          if (targetModel) {\n            const reorder = dragIndex > -1 && sourceModel && target === source;\n            const copy = !sourceModel || dragElm !== el;\n\n            if (reorder) {\n              sourceModel.splice(dropIndex, 0, sourceModel.splice(dragIndex, 1)[0]);\n            } else {\n              if (el.parentNode === target) {\n                target.removeChild(el);\n              }\n\n              if (copy) {\n                dropElmModel = JSON.parse(JSON.stringify(dropElmModel));\n              } else {\n                if (el.parentNode !== source) {\n                  // add element back, let angular remove it\n                  this.drake.cancel(true);\n                }\n\n                sourceModel.splice(dragIndex, 1);\n              }\n\n              targetModel.splice(dropIndex, 0, dropElmModel);\n            }\n          }\n        }\n\n        targetComponent.drop.emit({\n          type: 'drop',\n          el,\n          source,\n          value: dropElmModel,\n          dropIndex\n        });\n      });\n      this.drake.on('remove', (el, container, source) => {\n        if (this.droppableMap.has(source)) {\n          const sourceComponent = this.droppableMap.get(source);\n          const sourceModel = sourceComponent.model;\n          const dragIndex = draggedItem && sourceModel ? sourceModel.indexOf(draggedItem) : -1;\n\n          if (dragIndex > -1) {\n            if (el.parentNode !== source) {\n              // add element back, let angular remove it\n              source.appendChild(el);\n            }\n\n            sourceModel.splice(dragIndex, 1);\n          }\n\n          sourceComponent.remove.emit({\n            type: 'remove',\n            el,\n            container,\n            source,\n            value: draggedItem\n          });\n        }\n      });\n      this.drake.on('cancel', (el, container, source) => {\n        if (this.droppableMap.has(container)) {\n          const containerComponent = this.droppableMap.get(container);\n          containerComponent.cancel.emit({\n            type: 'cancel',\n            el,\n            container,\n            source,\n            value: draggedItem\n          });\n        }\n      });\n      this.drake.on('over', (el, container, source) => {\n        if (this.droppableMap.has(container)) {\n          const containerComponent = this.droppableMap.get(container);\n          containerComponent.over.emit({\n            type: 'over',\n            el,\n            container,\n            source,\n            value: draggedItem\n          });\n        }\n      });\n      this.drake.on('out', (el, container, source) => {\n        if (this.droppableMap.has(container)) {\n          const containerComponent = this.droppableMap.get(container);\n          containerComponent.out.emit({\n            type: 'out',\n            el,\n            container,\n            source,\n            value: draggedItem\n          });\n        }\n      });\n    }\n\n  }\n\n  DrakeStoreService.ɵfac = function DrakeStoreService_Factory(t) {\n    return new (t || DrakeStoreService)();\n  };\n\n  DrakeStoreService.ɵprov = ɵɵdefineInjectable({\n    factory: function DrakeStoreService_Factory() {\n      return new DrakeStoreService();\n    },\n    token: DrakeStoreService,\n    providedIn: \"root\"\n  });\n  return DrakeStoreService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet i = 10000;\n\nfunction getNextId() {\n  return i++;\n}\n/**\n * Makes the container droppable and children draggable.\n *\n * @export\n */\n\n\nlet DroppableDirective = /*#__PURE__*/(() => {\n  class DroppableDirective {\n    constructor(el, renderer, drakesService) {\n      this.el = el;\n      this.renderer = renderer;\n      this.drakesService = drakesService;\n      this.copy = false;\n      this.removeOnSpill = false;\n      this.direction = 'vertical';\n      this.drop = new EventEmitter();\n      this.drag = new EventEmitter();\n      this.over = new EventEmitter();\n      this.out = new EventEmitter();\n      this.remove = new EventEmitter();\n      this.cancel = new EventEmitter();\n    }\n\n    get container() {\n      return this.el.nativeElement;\n    }\n\n    get dropZone() {\n      return this._dropZone || this.ngxDroppable || this.defaultZone;\n    }\n\n    set dropZone(val) {\n      this._dropZone = val;\n    }\n\n    ngOnInit() {\n      this.defaultZone = `@@DefaultDropZone-${getNextId()}@@`;\n      this.drakesService.register(this);\n    }\n\n    ngAfterViewInit() {\n      this.over.subscribe(() => {\n        this.renderer.addClass(this.container, 'gu-over');\n      });\n      this.out.subscribe(() => {\n        this.renderer.removeClass(this.container, 'gu-over');\n      });\n    }\n\n    ngOnDestroy() {\n      this.drakesService.remove(this);\n    }\n\n  }\n\n  DroppableDirective.ɵfac = function DroppableDirective_Factory(t) {\n    return new (t || DroppableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DrakeStoreService));\n  };\n\n  DroppableDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: DroppableDirective,\n    selectors: [[\"\", \"ngxDroppable\", \"\"]],\n    inputs: {\n      copy: \"copy\",\n      removeOnSpill: \"removeOnSpill\",\n      direction: \"direction\",\n      dropZone: \"dropZone\",\n      model: \"model\",\n      ngxDroppable: \"ngxDroppable\"\n    },\n    outputs: {\n      drop: \"drop\",\n      drag: \"drag\",\n      over: \"over\",\n      out: \"out\",\n      remove: \"remove\",\n      cancel: \"cancel\"\n    }\n  });\n  return DroppableDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Adds properties and events to draggable elements\n *\n * @export\n */\n\n\nlet DraggableDirective = /*#__PURE__*/(() => {\n  class DraggableDirective {\n    constructor(el, drakesService, droppableDirective) {\n      this.el = el;\n      this.drakesService = drakesService;\n      this.droppableDirective = droppableDirective;\n      this._moves = true;\n      /*\n      ContentChildren doesn't get children created with NgTemplateOutlet\n      See https://github.com/angular/angular/issues/14842\n      Implemented via updateElements method\n             @ContentChildren(DragHandleDirective, {descendants: true})\n      handlesList: QueryList<DragHandleDirective>; */\n\n      this.handles = [];\n      this.drag = new EventEmitter();\n      this.dragDelay = 200; // milliseconds\n\n      this.dragDelayed = true;\n    }\n\n    get dropZones() {\n      return this._dropZones || this.ngxDraggable || this._parentDropzones;\n    }\n\n    set dropZones(val) {\n      this._dropZones = val;\n    }\n\n    get hasHandle() {\n      return !!this.handles.length;\n    }\n\n    get element() {\n      return this.el.nativeElement;\n    } // From: https://github.com/bevacqua/dragula/issues/289#issuecomment-277143172\n\n\n    onMove(e) {\n      if (!this._moves || this.dragDelayed) {\n        e.stopPropagation();\n        clearTimeout(this.touchTimeout);\n      }\n    }\n\n    onDown() {\n      if (this._moves) {\n        this.touchTimeout = setTimeout(() => {\n          this.dragDelayed = false;\n        }, this.dragDelay);\n      }\n    }\n\n    onUp() {\n      if (this._moves) {\n        clearTimeout(this.touchTimeout);\n        this.dragDelayed = true;\n      }\n    }\n\n    ngOnInit() {\n      this.update();\n    }\n\n    update() {\n      this._parentDropzones = [this.droppableDirective.dropZone];\n      this.drakesService.registerDraggable(this);\n      this.updateElements();\n    }\n\n    ngOnDestroy() {\n      this.drakesService.removeDraggable(this);\n    }\n\n    updateElements() {\n      const nativeElement = this.el.nativeElement;\n      const handles = nativeElement.querySelectorAll('[ngxdraghandle]');\n      this.handles = Array.from(handles).filter(h => findFirstDraggableParent(h) === nativeElement);\n\n      function findFirstDraggableParent(c) {\n        while (c.parentNode) {\n          c = c.parentNode;\n\n          if (c.hasAttribute && c.hasAttribute('ngxdraggable')) {\n            return c;\n          }\n        }\n      }\n    }\n\n    canMove(source, handle, sibling) {\n      if (typeof this._moves === 'boolean') return this._moves;\n      if (typeof this._moves === 'function') return this._moves(this.model, source, handle, sibling);\n      return true;\n    }\n\n    moves(source, handle, sibling) {\n      if (!this.canMove(source, handle, sibling)) return false;\n      return this.hasHandle ? this.handles.some(h => handelFor(handle, h)) : true;\n\n      function handelFor(c, p) {\n        if (c === p) return true;\n\n        while ((c = c.parentNode) && c !== p); // tslint:disable-line\n\n\n        return !!c;\n      }\n    }\n\n    ngDoCheck() {\n      this.updateElements();\n    }\n\n  }\n\n  DraggableDirective.ɵfac = function DraggableDirective_Factory(t) {\n    return new (t || DraggableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DrakeStoreService), ɵngcc0.ɵɵdirectiveInject(DroppableDirective));\n  };\n\n  DraggableDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: DraggableDirective,\n    selectors: [[\"\", \"ngxDraggable\", \"\"]],\n    hostBindings: function DraggableDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"touchmove\", function DraggableDirective_touchmove_HostBindingHandler($event) {\n          return ctx.onMove($event);\n        })(\"touchstart\", function DraggableDirective_touchstart_HostBindingHandler() {\n          return ctx.onDown();\n        })(\"touchend\", function DraggableDirective_touchend_HostBindingHandler() {\n          return ctx.onUp();\n        });\n      }\n    },\n    inputs: {\n      _moves: [\"moves\", \"_moves\"],\n      dropZones: \"dropZones\",\n      ngxDraggable: \"ngxDraggable\",\n      model: \"model\"\n    },\n    outputs: {\n      drag: \"drag\"\n    }\n  });\n  return DraggableDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Adds properties and events to drag handle elements\n *\n * @export\n */\n\n\nlet DragHandleDirective = /*#__PURE__*/(() => {\n  class DragHandleDirective {}\n\n  DragHandleDirective.ɵfac = function DragHandleDirective_Factory(t) {\n    return new (t || DragHandleDirective)();\n  };\n\n  DragHandleDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: DragHandleDirective,\n    selectors: [[\"\", \"ngxDragHandle\", \"\"]]\n  });\n  return DragHandleDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet i$1 = 0;\n\nfunction getNextId$1() {\n  return i$1++;\n}\n/**\n * Component that allows nested ngxDroppable and ngxDraggables\n *\n * @export\n */\n\n\nlet ContainerComponent = /*#__PURE__*/(() => {\n  class ContainerComponent {\n    constructor() {\n      this.copy = false;\n      this.removeOnSpill = false;\n      this.dropZone = `@@DefaultDropZone-${getNextId$1()}@@`;\n      this.drop = new EventEmitter();\n      this.drag = new EventEmitter();\n      this.over = new EventEmitter();\n      this.out = new EventEmitter();\n      this.remove = new EventEmitter();\n      this.cancel = new EventEmitter();\n    }\n\n    get dropZones() {\n      return this._dropZones || this._defaultZones;\n    }\n\n    set dropZones(val) {\n      this._dropZones = val;\n    } // @Input() classes: any = {};\n    // @Input() dragulaOptions: any;\n\n\n    set templateInput(template) {\n      this.template = template;\n    }\n\n    set templateChild(template) {\n      this.template = template;\n    }\n\n    ngOnInit() {\n      this._defaultZones = [this.dropZone];\n    }\n\n    ngAfterViewInit() {\n      this.droppable.drag.subscribe(v => this.drag.emit(v));\n      this.droppable.drop.subscribe(v => this.drop.emit(v));\n      this.droppable.over.subscribe(v => this.over.emit(v));\n      this.droppable.out.subscribe(v => this.out.emit(v));\n      this.droppable.remove.subscribe(v => this.remove.emit(v));\n      this.droppable.cancel.subscribe(v => this.cancel.emit(v));\n    }\n\n  }\n\n  ContainerComponent.ɵfac = function ContainerComponent_Factory(t) {\n    return new (t || ContainerComponent)();\n  };\n\n  ContainerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ContainerComponent,\n    selectors: [[\"ngx-dnd-container\"]],\n    contentQueries: function ContainerComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, TemplateRef, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateChild = _t.first);\n      }\n    },\n    viewQuery: function ContainerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(DroppableDirective, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.droppable = _t.first);\n      }\n    },\n    inputs: {\n      copy: \"copy\",\n      removeOnSpill: \"removeOnSpill\",\n      dropZone: \"dropZone\",\n      dropZones: \"dropZones\",\n      templateInput: [\"template\", \"templateInput\"],\n      model: \"model\",\n      droppableItemClass: \"droppableItemClass\",\n      moves: \"moves\"\n    },\n    outputs: {\n      drop: \"drop\",\n      drag: \"drag\",\n      over: \"over\",\n      out: \"out\",\n      remove: \"remove\",\n      cancel: \"cancel\"\n    },\n    ngContentSelectors: _c1,\n    decls: 3,\n    vars: 9,\n    consts: [[\"ngxDroppable\", \"\", 1, \"ngx-dnd-container\", 3, \"dropZone\", \"model\", \"copy\", \"ngClass\", \"removeOnSpill\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"ngxDraggable\", \"\", 3, \"model\", \"dropZone\", \"dropZones\", \"copy\", \"moves\", \"removeOnSpill\", \"droppableItemClass\"]],\n    template: function ContainerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, ContainerComponent_ng_container_1_Template, 2, 1, \"ng-container\", 1);\n        ɵngcc0.ɵɵtemplate(2, ContainerComponent_ng_content_2_Template, 1, 0, \"ng-content\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"dropZone\", ctx.dropZone)(\"model\", ctx.model)(\"copy\", ctx.copy)(\"ngClass\", ɵngcc0.ɵɵpureFunction1(7, _c0, !(ctx.model == null ? null : ctx.model.length)))(\"removeOnSpill\", ctx.removeOnSpill);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.model);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.model);\n      }\n    },\n    directives: function () {\n      return [DroppableDirective, ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc1.NgForOf, ItemComponent, DraggableDirective];\n    },\n    styles: [\".ngx-dnd-container{background-color:hsla(0,0%,100%,.2);border:2px solid red;margin:10px;padding:10px}.ngx-dnd-container.gu-empty{border:2px dotted red}.ngx-dnd-container:nth-child(odd){background-color:rgba(0,0,0,.2)}.ngx-dnd-container .ex-moved{background-color:#e74c3c}.ngx-dnd-container .ex-over{background-color:hsla(0,0%,100%,.3)}.ngx-dnd-container .handle{background-color:rgba(0,0,0,.4);cursor:move;margin-right:5px;padding:0 5px}.no-select{-moz-user-select:none;-ms-user-select:none;-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}.clearfix:after{clear:both;content:\\\" \\\";display:block;height:0}\"],\n    encapsulation: 2\n  });\n  return ContainerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Component that allows nested ngxDroppable and ngxDraggables\n * Should only be use inside a ngx-dnd-container\n * Outside a ngx-dnd-container use ngxDroppable\n *\n * @export\n */\n\n\nlet ItemComponent = /*#__PURE__*/(() => {\n  class ItemComponent {\n    constructor(container, draggableDirective) {\n      this.container = container;\n      this.draggableDirective = draggableDirective;\n      this._copy = false;\n      this._removeOnSpill = false;\n    }\n\n    get dropZone() {\n      return this._dropZone || this.container.dropZone;\n    }\n\n    set dropZone(val) {\n      this._dropZone = val;\n    }\n\n    get dropZones() {\n      return this._dropZones || this.container.dropZones;\n    }\n\n    set dropZones(val) {\n      this._dropZones = val;\n    }\n\n    get droppableItemClass() {\n      return this._droppableItemClass || this.container.droppableItemClass;\n    }\n\n    set droppableItemClass(val) {\n      this._droppableItemClass = val;\n    }\n\n    get removeOnSpill() {\n      return typeof this._removeOnSpill === 'boolean' ? this._removeOnSpill : this.container.removeOnSpill;\n    }\n\n    set removeOnSpill(val) {\n      this._removeOnSpill = val;\n    }\n\n    get copy() {\n      return typeof this._copy === 'boolean' ? this._copy : this.container.copy;\n    }\n\n    set copy(val) {\n      this._copy = val;\n    }\n\n    get hasHandle() {\n      return this.draggableDirective.hasHandle;\n    }\n\n    get moveDisabled() {\n      return !this.draggableDirective.canMove();\n    }\n\n    get classString() {\n      const itemClass = typeof this.droppableItemClass === 'function' ? this.droppableItemClass(this.model) : this.droppableItemClass;\n      const classes = ['ngx-dnd-item', itemClass || ''];\n\n      if (this.moveDisabled) {\n        classes.push('move-disabled');\n      }\n\n      if (this.hasHandle) {\n        classes.push('has-handle');\n      }\n\n      return classes.join(' ');\n    }\n\n    get type() {\n      if (Array.isArray(this.model)) {\n        return 'array';\n      }\n\n      return typeof this.model;\n    }\n\n    ngOnInit() {\n      this.data = {\n        model: this.model,\n        type: this.type,\n        dropZone: this.dropZone,\n        template: this.container.template\n      };\n    }\n\n  }\n\n  ItemComponent.ɵfac = function ItemComponent_Factory(t) {\n    return new (t || ItemComponent)(ɵngcc0.ɵɵdirectiveInject(ContainerComponent), ɵngcc0.ɵɵdirectiveInject(DraggableDirective));\n  };\n\n  ItemComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ItemComponent,\n    selectors: [[\"ngx-dnd-item\"]],\n    hostVars: 2,\n    hostBindings: function ItemComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.classString);\n      }\n    },\n    inputs: {\n      dropZone: \"dropZone\",\n      dropZones: \"dropZones\",\n      droppableItemClass: \"droppableItemClass\",\n      removeOnSpill: \"removeOnSpill\",\n      copy: \"copy\",\n      model: \"model\"\n    },\n    decls: 5,\n    vars: 4,\n    consts: [[3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [4, \"ngSwitchDefault\"], [3, \"model\", \"template\", \"dropZone\", \"dropZones\", \"removeOnSpill\", \"droppableItemClass\", \"copy\"], [4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"ngx-dnd-content\"], [3, \"model\", \"template\", \"dropZone\", \"dropZones\", \"removeOnSpill\", \"droppableItemClass\", \"copy\", 4, \"ngIf\"], [\"class\", \"ngx-dnd-content\", 4, \"ngIf\"]],\n    template: function ItemComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtemplate(1, ItemComponent_ng_container_1_Template, 2, 7, \"ng-container\", 1);\n        ɵngcc0.ɵɵtemplate(2, ItemComponent_ng_container_2_Template, 3, 2, \"ng-container\", 1);\n        ɵngcc0.ɵɵtemplate(3, ItemComponent_ng_container_3_Template, 1, 0, \"ng-container\", 1);\n        ɵngcc0.ɵɵtemplate(4, ItemComponent_ng_container_4_Template, 3, 2, \"ng-container\", 2);\n        ɵngcc0.ɵɵelementContainerEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.type);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"array\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"object\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"undefined\");\n      }\n    },\n    directives: [ɵngcc1.NgSwitch, ɵngcc1.NgSwitchCase, ɵngcc1.NgSwitchDefault, ContainerComponent, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n    styles: [\".ngx-dnd-box,.ngx-dnd-item{background-color:rgba(0,0,0,.2);border:1px solid #add8e6;display:block;margin:10px;padding:10px;transition:opacity .4s ease-in-out}.ngx-dnd-box.has-handle [ngxdraghandle],.ngx-dnd-box.has-handle [ngxDragHandle],.ngx-dnd-box:not(.has-handle):not(.move-disabled),.ngx-dnd-item.has-handle [ngxdraghandle],.ngx-dnd-item.has-handle [ngxDragHandle],.ngx-dnd-item:not(.has-handle):not(.move-disabled){cursor:move;cursor:grab;cursor:-webkit-grab}.ngx-dnd-box .ngx-dnd-content,.ngx-dnd-item .ngx-dnd-content{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;user-select:none}.ngx-dnd-box:hover,.ngx-dnd-item:hover{border:1px solid #00f}.ngx-dnd-box{float:left;height:40px;line-height:20px;text-align:center;width:40px}.gu-mirror{-ms-filter:\\\"progid:DXImageTransform.Microsoft.Alpha(Opacity=80)\\\";filter:alpha(opacity=80);margin:0!important;opacity:.8;position:fixed!important;z-index:9999!important}.gu-hide{display:none!important}.gu-unselectable{-moz-user-select:none!important;-ms-user-select:none!important;-webkit-user-select:none!important;user-select:none!important}.gu-transit{-ms-filter:\\\"progid:DXImageTransform.Microsoft.Alpha(Opacity=20)\\\";filter:alpha(opacity=20);opacity:.2}\"],\n    encapsulation: 2\n  });\n  return ItemComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst components = [ContainerComponent, ItemComponent];\nconst directives = [DraggableDirective, DroppableDirective, DragHandleDirective];\nlet NgxDnDModule = /*#__PURE__*/(() => {\n  class NgxDnDModule {\n    static forRoot() {\n      return {\n        ngModule: NgxDnDModule,\n        providers: [DrakeStoreService]\n      };\n    }\n\n  }\n\n  NgxDnDModule.ɵfac = function NgxDnDModule_Factory(t) {\n    return new (t || NgxDnDModule)();\n  };\n\n  NgxDnDModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxDnDModule\n  });\n  NgxDnDModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return NgxDnDModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxDnDModule, {\n    declarations: function () {\n      return [ContainerComponent, ItemComponent, DraggableDirective, DroppableDirective, DragHandleDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ContainerComponent, ItemComponent, DraggableDirective, DroppableDirective, DragHandleDirective];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ContainerComponent, DragHandleDirective, DraggableDirective, DrakeStoreService, DroppableDirective, ItemComponent, NgxDnDModule }; //# sourceMappingURL=swimlane-ngx-dnd.js.map","map":null,"metadata":{},"sourceType":"module"}