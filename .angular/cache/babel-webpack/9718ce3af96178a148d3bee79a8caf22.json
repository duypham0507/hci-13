{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { NavigationStart } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/cdk/platform\";\nexport let FuseConfigService = /*#__PURE__*/(() => {\n  class FuseConfigService {\n    /**\r\n     * @param router\r\n     * @param platform\r\n     */\n    constructor(router, platform) {\n      this.router = router;\n      this.platform = platform; // Set the default settings\n\n      this.defaultSettings = {\n        layout: {\n          navigation: 'left',\n          navigationFolded: false,\n          toolbar: 'below',\n          footer: 'below',\n          mode: 'fullwidth' // 'boxed', 'fullwidth'\n\n        },\n        colorClasses: {\n          toolbar: 'mat-white-500-bg',\n          navbar: 'mat-fuse-dark-700-bg',\n          footer: 'mat-fuse-dark-900-bg'\n        },\n        customScrollbars: true,\n        routerAnimation: 'fadeIn' // fadeIn, slideUp, slideDown, slideRight, slideLeft, none\n\n      };\n      /**\r\n       * Disable Custom Scrollbars if Browser is Mobile\r\n       */\n\n      if (this.platform.ANDROID || this.platform.IOS) {\n        this.defaultSettings.customScrollbars = false;\n      } // Set the settings from the default settings\n\n\n      this.settings = Object.assign({}, this.defaultSettings); // Reload the default settings on every navigation start\n\n      router.events.subscribe(event => {\n        if (event instanceof NavigationStart) {\n          this.setSettings({\n            layout: this.defaultSettings.layout\n          });\n        }\n      }); // Create the behavior subject\n\n      this.onSettingsChanged = new BehaviorSubject(this.settings);\n    }\n    /**\r\n     * Sets settings\r\n     * @param settings\r\n     */\n\n\n    setSettings(settings) {\n      // Set the settings from the given object\n      this.settings = Object.assign({}, this.settings, settings); // Trigger the event\n\n      this.onSettingsChanged.next(this.settings);\n    }\n\n  }\n\n  FuseConfigService.ɵfac = function FuseConfigService_Factory(t) {\n    return new (t || FuseConfigService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.Platform));\n  };\n\n  FuseConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FuseConfigService,\n    factory: FuseConfigService.ɵfac\n  });\n  return FuseConfigService;\n})();","map":null,"metadata":{},"sourceType":"module"}