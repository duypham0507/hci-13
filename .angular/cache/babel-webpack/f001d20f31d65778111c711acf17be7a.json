{"ast":null,"code":"import { MatPaginatorIntl } from '@angular/material/paginator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nexport let MatPaginatorIntlCro = /*#__PURE__*/(() => {\n  class MatPaginatorIntlCro extends MatPaginatorIntl {\n    constructor(translate) {\n      super();\n      this.translate = translate;\n      this.itemsPerPageLabel = 'Items per page';\n      this.nextPageLabel = 'Next page';\n      this.previousPageLabel = 'Previous page';\n\n      this.getRangeLabel = function (page, pageSize, length) {\n        if (length === 0 || pageSize === 0) {\n          return `0 / ${length}`;\n        }\n\n        length = Math.max(length, 0);\n        const startIndex = page * pageSize; // If the start index exceeds the list length, do not try and fix the end index to the end.\n\n        const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n        return `${startIndex + 1} - ${endIndex} / ${length}`;\n      };\n\n      this.translate.onLangChange.subscribe(e => {\n        this.getAndInitTranslations();\n      });\n      this.getAndInitTranslations();\n    }\n\n    getAndInitTranslations() {\n      this.translate.get(['Common.ItemsPerPage', 'Common.NextPage', 'Common.PreviousPage']).subscribe(translation => {\n        this.itemsPerPageLabel = translation['Common.ItemsPerPage'];\n        this.nextPageLabel = translation['Common.NextPage'];\n        this.previousPageLabel = translation['Common.PreviousPage'];\n        this.changes.next();\n      });\n    }\n\n  }\n\n  MatPaginatorIntlCro.ɵfac = function MatPaginatorIntlCro_Factory(t) {\n    return new (t || MatPaginatorIntlCro)(i0.ɵɵinject(i1.TranslateService));\n  };\n\n  MatPaginatorIntlCro.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MatPaginatorIntlCro,\n    factory: MatPaginatorIntlCro.ɵfac\n  });\n  return MatPaginatorIntlCro;\n})();","map":null,"metadata":{},"sourceType":"module"}