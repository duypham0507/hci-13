{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nexport let FuseNavigationService = /*#__PURE__*/(() => {\n  class FuseNavigationService {\n    /**\r\n     * Constructor\r\n     */\n    constructor() {\n      this._registry = {}; // Set the defaults\n\n      this.onItemCollapsed = new Subject();\n      this.onItemCollapseToggled = new Subject(); // Set the private defaults\n\n      this._currentNavigationKey = null;\n      this._onNavigationChanged = new BehaviorSubject(null);\n      this._onNavigationRegistered = new BehaviorSubject(null);\n      this._onNavigationUnregistered = new BehaviorSubject(null);\n      this._onNavigationItemAdded = new BehaviorSubject(null);\n      this._onNavigationItemUpdated = new BehaviorSubject(null);\n      this._onNavigationItemRemoved = new BehaviorSubject(null);\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\r\n     * Get onNavigationChanged\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\n\n\n    get onNavigationChanged() {\n      return this._onNavigationChanged.asObservable();\n    }\n    /**\r\n     * Get onNavigationRegistered\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\n\n\n    get onNavigationRegistered() {\n      return this._onNavigationRegistered.asObservable();\n    }\n    /**\r\n     * Get onNavigationUnregistered\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\n\n\n    get onNavigationUnregistered() {\n      return this._onNavigationUnregistered.asObservable();\n    }\n    /**\r\n     * Get onNavigationItemAdded\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\n\n\n    get onNavigationItemAdded() {\n      return this._onNavigationItemAdded.asObservable();\n    }\n    /**\r\n     * Get onNavigationItemUpdated\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\n\n\n    get onNavigationItemUpdated() {\n      return this._onNavigationItemUpdated.asObservable();\n    }\n    /**\r\n     * Get onNavigationItemRemoved\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\n\n\n    get onNavigationItemRemoved() {\n      return this._onNavigationItemRemoved.asObservable();\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\r\n     * Register the given navigation\r\n     * with the given key\r\n     *\r\n     * @param key\r\n     * @param navigation\r\n     */\n\n\n    register(key, navigation) {\n      // Check if the key already being used\n      if (this._registry[key]) {\n        console.error(`The navigation with the key '${key}' already exists. Either unregister it first or use a unique key.`);\n        return;\n      } // Add to the registry\n\n\n      this._registry[key] = navigation; // Notify the subject\n\n      this._onNavigationRegistered.next([key, navigation]);\n    }\n    /**\r\n     * Unregister the navigation from the registry\r\n     * @param key\r\n     */\n\n\n    unregister(key) {\n      // Check if the navigation exists\n      if (!this._registry[key]) {\n        console.warn(`The navigation with the key '${key}' doesn't exist in the registry.`);\n      } // Unregister the sidebar\n\n\n      delete this._registry[key]; // Notify the subject\n\n      this._onNavigationUnregistered.next(key);\n    }\n    /**\r\n     * Get navigation from registry by key\r\n     *\r\n     * @param key\r\n     * @returns {any}\r\n     */\n\n\n    getNavigation(key) {\n      // Check if the navigation exists\n      if (!this._registry[key]) {\n        console.warn(`The navigation with the key '${key}' doesn't exist in the registry.`);\n        return;\n      } // Return the sidebar\n\n\n      return this._registry[key];\n    }\n    /**\r\n     * Get flattened navigation array\r\n     *\r\n     * @param navigation\r\n     * @param flatNavigation\r\n     * @returns {any[]}\r\n     */\n\n\n    getFlatNavigation(navigation, flatNavigation = []) {\n      for (const item of navigation) {\n        if (item.type === 'item') {\n          flatNavigation.push(item);\n          continue;\n        }\n\n        if (item.type === 'collapsable' || item.type === 'group') {\n          if (item.children) {\n            this.getFlatNavigation(item.children, flatNavigation);\n          }\n        }\n      }\n\n      return flatNavigation;\n    }\n    /**\r\n     * Get the current navigation\r\n     *\r\n     * @returns {any}\r\n     */\n\n\n    getCurrentNavigation() {\n      if (!this._currentNavigationKey) {\n        console.warn(`The current navigation is not set.`);\n        return;\n      }\n\n      return this.getNavigation(this._currentNavigationKey);\n    }\n    /**\r\n     * Set the navigation with the key\r\n     * as the current navigation\r\n     *\r\n     * @param key\r\n     */\n\n\n    setCurrentNavigation(key) {\n      // Check if the sidebar exists\n      if (!this._registry[key]) {\n        console.warn(`The navigation with the key '${key}' doesn't exist in the registry.`);\n        return;\n      } // Set the current navigation key\n\n\n      this._currentNavigationKey = key; // Notify the subject\n\n      this._onNavigationChanged.next(key);\n    }\n    /**\r\n     * Get navigation item by id from the\r\n     * current navigation\r\n     *\r\n     * @param id\r\n     * @param {any} navigation\r\n     * @returns {any | boolean}\r\n     */\n\n\n    getNavigationItem(id, navigation = null) {\n      if (!navigation) {\n        navigation = this.getCurrentNavigation();\n      }\n\n      for (const item of navigation) {\n        if (item.id === id) {\n          return item;\n        }\n\n        if (item.children) {\n          const childItem = this.getNavigationItem(id, item.children);\n\n          if (childItem) {\n            return childItem;\n          }\n        }\n      }\n\n      return false;\n    }\n    /**\r\n     * Get the parent of the navigation item\r\n     * with the id\r\n     *\r\n     * @param id\r\n     * @param {any} navigation\r\n     * @param parent\r\n     */\n\n\n    getNavigationItemParent(id, navigation = null, parent = null) {\n      if (!navigation) {\n        navigation = this.getCurrentNavigation();\n        parent = navigation;\n      }\n\n      for (const item of navigation) {\n        if (item.id === id) {\n          return parent;\n        }\n\n        if (item.children) {\n          const childItem = this.getNavigationItemParent(id, item.children, item);\n\n          if (childItem) {\n            return childItem;\n          }\n        }\n      }\n\n      return false;\n    }\n    /**\r\n     * Add a navigation item to the specified location\r\n     *\r\n     * @param item\r\n     * @param id\r\n     */\n\n\n    addNavigationItem(item, id) {\n      // Get the current navigation\n      const navigation = this.getCurrentNavigation(); // Add to the end of the navigation\n\n      if (id === 'end') {\n        navigation.push(item); // Trigger the observable\n\n        this._onNavigationItemAdded.next(true);\n\n        return;\n      } // Add to the start of the navigation\n\n\n      if (id === 'start') {\n        navigation.unshift(item); // Trigger the observable\n\n        this._onNavigationItemAdded.next(true);\n\n        return;\n      } // Add it to a specific location\n\n\n      const parent = this.getNavigationItem(id);\n\n      if (parent) {\n        // Check if parent has a children entry,\n        // and add it if it doesn't\n        if (!parent.children) {\n          parent.children = [];\n        } // Add the item\n\n\n        parent.children.push(item);\n      } // Trigger the observable\n\n\n      this._onNavigationItemAdded.next(true);\n    }\n    /**\r\n     * Update navigation item with the given id\r\n     *\r\n     * @param id\r\n     * @param properties\r\n     */\n\n\n    updateNavigationItem(id, properties) {\n      // Get the navigation item\n      const navigationItem = this.getNavigationItem(id); // If there is no navigation with the give id, return\n\n      if (!navigationItem) {\n        return;\n      } // Merge the navigation properties\n\n\n      _.merge(navigationItem, properties); // Trigger the observable\n\n\n      this._onNavigationItemUpdated.next(true);\n    }\n    /**\r\n     * Remove navigation item with the given id\r\n     *\r\n     * @param id\r\n     */\n\n\n    removeNavigationItem(id) {\n      const item = this.getNavigationItem(id); // Return, if there is not such an item\n\n      if (!item) {\n        return;\n      } // Get the parent of the item\n\n\n      let parent = this.getNavigationItemParent(id); // This check is required because of the first level\n      // of the navigation, since the first level is not\n      // inside the 'children' array\n\n      parent = parent.children || parent; // Remove the item\n\n      parent.splice(parent.indexOf(item), 1); // Trigger the observable\n\n      this._onNavigationItemRemoved.next(true);\n    }\n\n  }\n\n  FuseNavigationService.ɵfac = function FuseNavigationService_Factory(t) {\n    return new (t || FuseNavigationService)();\n  };\n\n  FuseNavigationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FuseNavigationService,\n    factory: FuseNavigationService.ɵfac,\n    providedIn: 'root'\n  });\n  return FuseNavigationService;\n})();","map":null,"metadata":{},"sourceType":"module"}