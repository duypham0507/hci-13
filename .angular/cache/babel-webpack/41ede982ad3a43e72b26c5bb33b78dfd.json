{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let FuseNavigationService = /*#__PURE__*/(() => {\n  class FuseNavigationService {\n    constructor() {\n      this.onNavCollapseToggle = new EventEmitter();\n      this.onNavCollapseToggled = new EventEmitter();\n      this.onNavigationModelChange = new BehaviorSubject({});\n      this.flatNavigation = [];\n    }\n    /**\r\n     * Get navigation model\r\n     *\r\n     * @returns {any[]}\r\n     */\n\n\n    getNavigationModel() {\n      return this.navigationModel.model;\n    }\n    /**\r\n     * Set the navigation model\r\n     *\r\n     * @param model\r\n     */\n\n\n    setNavigationModel(model) {\n      this.navigationModel = model;\n      this.onNavigationModelChange.next(this.navigationModel.model);\n    }\n    /**\r\n     * Add new navigation item\r\n     * to the given location\r\n     */\n\n\n    addNavigationItem(location, item) {\n      // Parse the location\n      const locationArr = location.split('.');\n\n      if (locationArr.length === 0) {\n        return;\n      } // Find the navigation item\n\n\n      const navItem = this.findNavigationItemById(locationArr); // Act according to the item type\n\n      switch (navItem.type) {\n        case 'item':\n          // Create a children array\n          navItem.children = []; // Push the item\n\n          navItem.children.push(item); // Change the item type to collapsable\n\n          navItem.type = 'collapse';\n          break;\n\n        case 'collapse':\n          // Push the item\n          navItem.children.push(item);\n          break;\n\n        case 'group':\n          // Push the item\n          navItem.children.push(item);\n          break;\n\n        default:\n          break;\n      }\n    }\n    /**\r\n     * Get navigation item from\r\n     * given location\r\n     *\r\n     * @param location\r\n     */\n\n\n    getNavigationItem(location) {\n      // Parse the location\n      const locationArr = location.split('.');\n\n      if (locationArr.length === 0) {\n        return;\n      } // Find and return the navigation item\n\n\n      return this.findNavigationItemById(locationArr);\n    }\n    /**\r\n     * Find navigation item by location\r\n     *\r\n     * @param location\r\n     * @param navigation\r\n     */\n\n\n    findNavigationItemById(location, navigation) {\n      if (!navigation) {\n        navigation = this.navigationModel.model;\n      } // Iterate through the given navigation\n\n\n      for (const navItem of navigation) {\n        // If the nav item id equals the first location...\n        if (navItem.id === location[0]) {\n          // If there is more location to look at...\n          if (location.length > 1) {\n            // Remove the first item of the location\n            location.splice(0, 1); // Go nested...\n\n            return this.findNavigationItemById(location, navItem.children);\n          } // Otherwise just return the nav item\n          else {\n            return navItem;\n          }\n        }\n      }\n    }\n    /**\r\n     * Get flattened navigation array\r\n     * @param navigationItems\r\n     * @returns {any[]}\r\n     */\n\n\n    getFlatNavigation(navigationItems) {\n      // If navigation items not provided,\n      // that means we are running the function\n      // for the first time...\n      if (!navigationItems) {\n        // Reset the flat navigation\n        this.flatNavigation = []; // Get the entire navigation model\n\n        navigationItems = this.navigationModel.model;\n      }\n\n      for (const navItem of navigationItems) {\n        if (navItem.type === 'subheader') {\n          continue;\n        }\n\n        if (navItem.type === 'item') {\n          this.flatNavigation.push({\n            title: navItem.title,\n            type: navItem.type,\n            icon: navItem.icon || false,\n            url: navItem.url\n          });\n          continue;\n        }\n\n        if (navItem.type === 'collapse' || navItem.type === 'group') {\n          if (navItem.children) {\n            this.getFlatNavigation(navItem.children);\n          }\n        }\n      }\n\n      return this.flatNavigation;\n    }\n\n  }\n\n  FuseNavigationService.ɵfac = function FuseNavigationService_Factory(t) {\n    return new (t || FuseNavigationService)();\n  };\n\n  FuseNavigationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FuseNavigationService,\n    factory: FuseNavigationService.ɵfac\n  });\n  return FuseNavigationService;\n})();","map":null,"metadata":{},"sourceType":"module"}