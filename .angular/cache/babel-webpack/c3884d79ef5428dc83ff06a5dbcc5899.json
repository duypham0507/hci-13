{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\nimport { Guid } from \"../guid\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../core/services/splash-screen.service\";\nexport let WaitingService = /*#__PURE__*/(() => {\n  class WaitingService {\n    constructor(_injector, _splashService) {\n      this.onWaitingChange = new EventEmitter(false);\n      this.injector = _injector;\n      this.splashService = _splashService;\n    }\n\n    startWaiting() {\n      let id = Guid.newGuid();\n      this.splashService.show(true);\n      WaitingService.queueWaiting.push(id);\n      return id;\n    }\n\n    stopWaiting(id) {\n      if (!id) {\n        WaitingService.queueWaiting = [];\n      } else {\n        const index = WaitingService.queueWaiting.indexOf(id, 0);\n        if (index > -1) WaitingService.queueWaiting.splice(index, 1);\n      }\n\n      if (WaitingService.queueWaiting.length == 0) this.splashService.hide();\n    }\n\n    startWaitingBar() {\n      let id = Guid.newGuid();\n      this.onWaitingChange.emit(true);\n      WaitingService.queueWaitingBar.push(id);\n      return id;\n    }\n\n    stopWaitingBar(id) {\n      if (!id) {\n        WaitingService.queueWaitingBar = [];\n      } else {\n        const index = WaitingService.queueWaitingBar.indexOf(id, 0);\n        if (index > -1) WaitingService.queueWaitingBar.splice(index, 1);\n      }\n\n      if (WaitingService.queueWaitingBar.length == 0) this.onWaitingChange.emit(false);\n    }\n\n  }\n\n  WaitingService.queueWaiting = [];\n  WaitingService.queueWaitingBar = [];\n\n  WaitingService.ɵfac = function WaitingService_Factory(t) {\n    return new (t || WaitingService)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i1.FuseSplashScreenService));\n  };\n\n  WaitingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WaitingService,\n    factory: WaitingService.ɵfac\n  });\n  return WaitingService;\n})();","map":null,"metadata":{},"sourceType":"module"}