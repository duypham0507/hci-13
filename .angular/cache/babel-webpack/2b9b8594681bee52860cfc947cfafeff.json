{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./fuse-mat-sidenav-helper.service\";\nimport * as i2 from \"../../services/match-media.service\";\nimport * as i3 from \"@angular/flex-layout\";\nimport * as i4 from \"@angular/material/sidenav\";\nexport let FuseMatSidenavHelperDirective = /*#__PURE__*/(() => {\n  class FuseMatSidenavHelperDirective {\n    constructor(fuseMatSidenavService, fuseMatchMedia, observableMedia, matSidenav) {\n      this.fuseMatSidenavService = fuseMatSidenavService;\n      this.fuseMatchMedia = fuseMatchMedia;\n      this.observableMedia = observableMedia;\n      this.matSidenav = matSidenav;\n      this.isLockedOpen = true;\n    }\n\n    ngOnInit() {\n      this.fuseMatSidenavService.setSidenav(this.id, this.matSidenav);\n\n      if (this.observableMedia.isActive(this.matIsLockedOpenBreakpoint)) {\n        this.isLockedOpen = true;\n        this.matSidenav.mode = 'side';\n        this.matSidenav.toggle(true);\n      } else {\n        this.isLockedOpen = false;\n        this.matSidenav.mode = 'over';\n        this.matSidenav.toggle(false);\n      }\n\n      this.matchMediaSubscription = this.fuseMatchMedia.onMediaChange.subscribe(() => {\n        if (this.observableMedia.isActive(this.matIsLockedOpenBreakpoint)) {\n          this.isLockedOpen = true;\n          this.matSidenav.mode = 'side';\n          this.matSidenav.toggle(true);\n        } else {\n          this.isLockedOpen = false;\n          this.matSidenav.mode = 'over';\n          this.matSidenav.toggle(false);\n        }\n      });\n    }\n\n    ngOnDestroy() {\n      this.matchMediaSubscription.unsubscribe();\n    }\n\n  }\n\n  FuseMatSidenavHelperDirective.ɵfac = function FuseMatSidenavHelperDirective_Factory(t) {\n    return new (t || FuseMatSidenavHelperDirective)(i0.ɵɵdirectiveInject(i1.FuseMatSidenavHelperService), i0.ɵɵdirectiveInject(i2.FuseMatchMedia), i0.ɵɵdirectiveInject(i3.MediaObserver), i0.ɵɵdirectiveInject(i4.MatSidenav));\n  };\n\n  FuseMatSidenavHelperDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: FuseMatSidenavHelperDirective,\n    selectors: [[\"\", \"fuseMatSidenavHelper\", \"\"]],\n    hostVars: 2,\n    hostBindings: function FuseMatSidenavHelperDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mat-is-locked-open\", ctx.isLockedOpen);\n      }\n    },\n    inputs: {\n      id: [\"fuseMatSidenavHelper\", \"id\"],\n      matIsLockedOpenBreakpoint: [\"mat-is-locked-open\", \"matIsLockedOpenBreakpoint\"]\n    }\n  });\n  return FuseMatSidenavHelperDirective;\n})();\nexport let FuseMatSidenavTogglerDirective = /*#__PURE__*/(() => {\n  class FuseMatSidenavTogglerDirective {\n    constructor(fuseMatSidenavService) {\n      this.fuseMatSidenavService = fuseMatSidenavService;\n    }\n\n    onClick() {\n      this.fuseMatSidenavService.getSidenav(this.id).toggle();\n    }\n\n  }\n\n  FuseMatSidenavTogglerDirective.ɵfac = function FuseMatSidenavTogglerDirective_Factory(t) {\n    return new (t || FuseMatSidenavTogglerDirective)(i0.ɵɵdirectiveInject(i1.FuseMatSidenavHelperService));\n  };\n\n  FuseMatSidenavTogglerDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: FuseMatSidenavTogglerDirective,\n    selectors: [[\"\", \"fuseMatSidenavToggler\", \"\"]],\n    hostBindings: function FuseMatSidenavTogglerDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function FuseMatSidenavTogglerDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n    },\n    inputs: {\n      id: [\"fuseMatSidenavToggler\", \"id\"]\n    }\n  });\n  return FuseMatSidenavTogglerDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}